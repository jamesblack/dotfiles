#!/usr/bin/env bash

if [[ "${DOTFILES}" == "" ]]; then
  DOTFILES=~/Code/github.com/jamesblack/dotfiles
fi

# Makes glob return dotfiles
if [ "$ZSH_NAME" != "" ]; then
  setopt dotglob
else
  shopt -s dotglob > /dev/null 2>&1
fi

function command_source() {
  # shellcheck disable=SC1090
  for file in "$DOTFILES"/source/*.sh; do source "$file"; done
}

function command_link() {
  e_header "Linking files to $HOME"
  for file in "$DOTFILES"/link/*; do
    echo "Linking $(basename "$file")..."
    rm "$HOME/$(basename "$file")" 2> /dev/null
    ln -s "$file" "$HOME/$(basename "$file")"
  done
}

function command_copy() {
  e_header "Copying files to $HOME"
  for file in "$DOTFILES"/copy/*; do
    echo "Copying $(basename "$file")..."
    dest="$HOME/$(basename "$file")"
    if test -f "$dest"; then
      echo "$dest already exists"
      echo -n 'Overwrite? (y/N) '; read -r overwrite
      case $overwrite in
        [Yy]* ) cp "$file" "$HOME/$(basename "$file")"; break;;
        * ) echo "Skipping copying $file"
      esac
    else
      cp "$file" "$HOME/$(basename "$file")"
    fi
  done
}

function command_init() {
  mkdir -p "$DOTFILES/caches/installers"
  mkdir -p "$DOTFILES/caches/fonts"
  for file in "$DOTFILES"/init/*; do
    e_header "Init $(basename "$file")"
    # shellcheck disable=SC1090
    source "$file"
    echo "done!"
  done
  rm -rf "$DOTFILES/caches"
}

function command_setup() {
  # Keep-alive: update existing `sudo` time stamp until everything has finished
  echo "Enter your password here. You should only have to enter it once through this whole process"
  sudo -v
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

  command_source
  command_copy
  command_link
  command_init
}

function command_backup() {
  local copy_dirs=(
    ~/.gnupg
    ~/.ssh
    ~/.aws
    ~/.npmrc
    ~/.now
    ~/.bashrc.local
    ~/Code
    ~/Documents
    ~/Pictures
  )
  local DIRECTORY=$1
  if [ ! -d "$DIRECTORY" ]; then
    echo "$DIRECTORY is not a valid directory"
    return
  fi
  # Add /backup to the end of the directory
  local DIRECTORY="$DIRECTORY"/backup
  # remove any duplicate / from the path for visual reasons
  local DIRECTORY=${DIRECTORY//\/\//\/}
  for copy_dir in "${copy_dirs[@]}"; do
    echo "Copying $copy_dir"
    rsync -rv \
      --exclude=*.DS_Store \
      --exclude=*/node_modules \
      --exclude=*/bower_components \
      --exclude=*/coverage \
      --exclude=*/.data \
      --exclude=*/.dock \
      --exclude=*/dump.rdb \
      --exclude=*/*.log \
      --exclude=*/*.photoslibrary/* \
      "$copy_dir" "$DIRECTORY"
  done
}

function e_header() {
  echo
  echo "======================================================================="
  echo -e "\033[1;36m$1\033[0m"
  echo "======================================================================="
}
function e_success()  { echo -e " \033[1;32m✔\033[0m  $*"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $*"; }
function e_arrow()    { echo -e " \033[1;34m➜\033[0m  $*"; }

case $1 in
  source)
    command_source
    ;;
  link)
    command_link
    ;;
  setup)
    command_setup
    ;;
  backup)
    command_backup "$2"
    ;;
  directory)
    echo "${DOTFILES}"
    ;;
  commands)
    echo 'source'
    echo 'link'
    echo 'setup'
    echo 'commands'
    echo 'directory'
    ;;
  '')
    cd "${DOTFILES}" || exit
    ;;
  *)
    echo "Unknown command '${1}'"
    ;;
esac
